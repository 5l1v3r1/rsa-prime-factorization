import java.math.BigInteger;

public class Ataque {

	public static void main(String[] args) {

		String messagePlain = "Test";
		BigInteger message = Converte.string2number(messagePlain);
		
		//BigInteger p = new BigInteger("149");
		//BigInteger q = new BigInteger("157");
		
		BigInteger p = new BigInteger("16769023");
		BigInteger q = new BigInteger("1073676287");
		
		// BigInteger p = new BigInteger("48057988205264189392002991");
		// BigInteger q = new BigInteger("65667146912202566719343491");
		
		RSA rsa = new RSA(p, q);
		
		System.out.println("Valor de p: " + rsa.p);
		System.out.println("Valor de q: " + rsa.q);
		System.out.println("Valor de phi: " + rsa.phi);
		System.out.println("Valor de n=(p*q): " + rsa.n);
		System.out.println("Valor da privateKey (d): " + rsa.privateKey);
		System.out.println("Valor da publicKey (e) (autogenerated): " + rsa.publicKey);
		
		System.out.println("--");
		
		System.out.println("Mensagem em texto claro: " + messagePlain);
		System.out.println("Aplicando criptografia RSA em codigo ASC: " + message);
		
		BigInteger criptografada = rsa.encrypt(message);
		BigInteger decptografadaRSA = rsa.decrypt(criptografada);
		
		System.out.println("Mensagem criptografada com os valores de [p] [q] e [n]: " + criptografada);
		
		System.out.println("\nInicializando ataque...");
		System.out.println("Tentando fatorar o [rsa.n = " + rsa.n + "] para achar p e q...");
		//BigInteger[] fatores = fatoracaoFermat( rsa.n );
		
		// Factor
		Fermat fermat = new Fermat();
		BigInteger fator1 = fermat.factor( rsa.n );
		BigInteger fator2 = rsa.n.divide(fator1);
		
		BigInteger one = new BigInteger("1");
		
		System.out.println("Fatores de [n] achados: " + fator1 + " x " + fator2);
		
		BigInteger phiQuebrado = ( fator1.subtract(one) ).multiply( fator2.subtract(one) );
		
		BigInteger privateKeyQuebrada = rsa.publicKey.modInverse(phiQuebrado);
		
		BigInteger mensagemQuebrada = criptografada.modPow(privateKeyQuebrada, rsa.n);
		
		System.out.println("Valor do phi QUEBRADO: " + phiQuebrado);
		System.out.println("Valor da privateKey QUEBRADA: " + privateKeyQuebrada);
		System.out.println("Valor da mensagem: " + mensagemQuebrada);
		System.out.println("Valor da mensagem plain: " + Converte.number2string(mensagemQuebrada));
		
		//BigInteger mensagemQuebradaPlain = Converte.number2string(mensagemQuebrada);
		
	}
	
	public static Long[] fatoracaoFermat(long num) {

		boolean isPrime = false;
		Long[] fatores = null;

		if (num % 2 != 0) { // eh par?

			long x = (long) Math.floor(Math.sqrt(num)); // x = sqrt(n)

			double y = 0;
			
			// Esse if modica as variaveis x e y. Mas so e executado se x nao
			// for um quadrado perfeito
			if (x * x != num) {
				while (true) {
					x++;
					y = Math.sqrt(x * x - num); // sqrt( x^2 - n )
					if (x == (long) ((num + 1) / 2)) {
						isPrime = true;
						break;
					}
					if (y == Math.floor(y))
						break;
				}
			}

			long y2 = (long) (Math.round(y));

			long fator1 = x - y2;
			long fator2 = x + y2;

			// resultado da fatoracao por Fermat
			if (isPrime == false) {
				fatores = new Long[] { fator1, fator2 };
			}
			
		} else {
			System.out.println(num + " eh par e portanto composto.");
		}

		return fatores;
	}
	
	public static boolean isPrime(long n) {
		if (n < 2)
			return false;

		if (n < 4)
			return true;

		if (n % 2 == 0)
			return false;

		int i, limit = (int) Math.sqrt(n);

		for (i = 3; i <= limit; i += 2)
			if (n % i == 0)
				return false;

		return true;
	}

}
